package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"graphql/graph/model"
	"log"
	"time"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUserInput) (*model.User, error) {
	now := int(time.Now().Unix())

	userHashPassword, err := HashPassword(input.Password)
	if err != nil {
		return nil, err
	}

	u := &model.User{
		Username:  input.Username,
		Email:     input.Email,
		Password:  userHashPassword,
		CreatedAt: now,
		UpdatedAt: 0,
	}

	createErr := u.Create()
	if createErr != nil {
		return nil, createErr
	}

	return u, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.Token, error) {
	user, err := FindUserByEmail(email)

	if err != nil || user == nil {
		return nil, errors.New("User Not Found")
	}

	if !ComparePassword(password, user.Password) {
		return nil, errors.New("Password Does'nt Correct")
	}

	expiredAt := int(time.Now().Add(time.Hour * 1).Unix())
	obj := &model.Token{
		Token:     JwtCreate(user.ID, int64(expiredAt)),
		ExpiredAt: expiredAt,
	}

	return obj, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	userAuth := GetAuthFromContext(ctx)
	log.Println("user", userAuth.UserID)
	if userAuth.UserID == 0 {
		return nil, errors.New("Access Denied")
	}

	var result []*model.User

	rows, err := DB.Query("SELECT id, username, email, created_at, updated_at FROM `users`")
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		var u model.User
		err = rows.Scan(&u.ID, &u.Username, &u.Email, &u.CreatedAt, &u.UpdatedAt)
		if err != nil {
			return nil, err
		}

		result = append(result, &u)
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
